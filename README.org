* 数值计算
** 多项式插值
目前只会写 拉格朗日插值法
#+begin_src julia
  interpolate(xs::Vector{T1}, ys::Vector{T2}, target::T3; method = lagrange_interpolate) where {T1 <: Number, T2 <: Number, T3 <: Number}
#+end_src

其中
- xs 表示 x轴上的点
- ys 表示 y轴上的点
- target 表示要求的 x

*** Usage
#+begin_src julia
  xs = collect(1:10)
  f(x) = 1 + 2x + 3x^2
  fxs = map(f, xs)

  result = interpolate(xs, fxs, 5)
  @show result
  @show f(5)

#+end_src
** 最小二乘估计法
这里最小二乘发用来确定函数 =y(x) = b0 + b1x= 中 b0 和 b1 的估计值，用来确定最佳拟合曲线

*** Usage
#+begin_src julia
  xs = 1:10
  ys = map(x -> 2x + 1, xs)

  @test lsqe(xs, ys) == (1.0, 2.0)

#+end_src
** 方程求解
#+begin_src julia
  root(f::Function, df::Function; start::Number, n::Int, delta::Number)
#+end_src
- =f= 求解的函数
- =df= f 的导数
- =start= 从哪个数字开始，默认为 =0=
- =n= 迭代的次数，默认为 =100=
- =delta= 精度大小，默认为 =0.001=
*** Usage
#+begin_src julia
  f(x) = x ^ 2 + 2x + 1
  df(x) = 2x + 2 # df 是 f 的导数

  (status, result) = root(f, df; start = 10, n = 100, delta = 0.001)
#+end_src